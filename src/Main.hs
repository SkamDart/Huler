module Main where

-- Problem One
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
problemOne :: Int
problemOne = sum [x | x <- [1..999], x `mod` 3 == 0 || x `mod` 5 == 0]

-- Problem Two
--
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
-- 
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- 
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
problemTwo :: Int
problemTwo = sum (filter even (takeWhile (\x -> x < maxNum) fibbs)) 
  where fibbs :: [Int]
        fibbs = 0 : 1 : zipWith (+) fibbs (tail fibbs)
        maxNum = 4000000

-- Problem Three
--
-- The prime factors of 13195 are 5, 7, 13 and 29.
--
-- What is the largest prime factor of the number 600851475143 ?
problemThree :: Integer
problemThree = problemThree' 600851475143

problemThree' :: Integer -> Integer
problemThree' k =
    let pfs :: (Integral a, Ord a) => a -> a -> [a]
        pfs n p = if n < (p ^ 2) then [n]
                  else v ++ (pfs n' p')
             where (v, n', p') = if n `mod` p == 0
                                 then ([p], n `div` p, p)
                                 else ([],  n,         p + 1)
    in maximum (pfs k 2)

-- Problem Four
-- A palindromic number reads the same both ways.
-- The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
-- 
-- Find the largest palindrome made from the product of two 3-digit numbers.
problemFour :: (Enum a, Num a, Ord a, Show a) => a
problemFour = 
    let prods = [(x * y) | x <- (enumFromThenTo 999 998 1),
                           y <- (enumFromThenTo 999 998 1),
                           isPalindrome (show (x * y)) ]
        isPalindrome xs = xs == (reverse xs)
    in maximum prods

main :: IO ()
main = putStrLn "Hello, Haskell!"

